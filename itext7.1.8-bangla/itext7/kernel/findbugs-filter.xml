<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
    <Match>
        <Or>
            <And>
                <!--This class is based on the C# open source freeware library Clipper.-->
                <!--We want to keep it as close as possible to the original code and therefore avoid refactoring.-->
                <Class name="com.itextpdf.kernel.pdf.canvas.parser.clipper.DefaultClipper"/>
                <Method name="intersectEdges"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.wmf.MetaDo"/>
                <Method name="readAll"/>
            </And>
        </Or>
        <Bug pattern="CC_CYCLOMATIC_COMPLEXITY"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.crypto.securityhandler.EncryptionUtils"/>
        <Or>
            <Method name="calculateDERForRecipientParams"/>
            <Method name="fetchEnvelopedData"/>
        </Or>
        <Bug pattern="CIPHER_INTEGRITY"/>
    </Match>
    <Match>
        <Or>
            <Class name="com.itextpdf.kernel.geom.AffineTransform"/>
            <Class name="com.itextpdf.kernel.geom.PageSize"/>
            <Class name="com.itextpdf.kernel.geom.Rectangle"/>
            <Class name="com.itextpdf.kernel.xmp.impl.XMPNode"/>
        </Or>
        <Method name="clone"/>
        <Bug pattern="CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.utils.XmlUtils"/>
        <Method name="writeXmlDocToStream"/>
        <Bug pattern="DE_MIGHT_IGNORE"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.utils.CompareTool"/>
        <Or>
            <Method name="findStringDifference"/>
            <Method name="findBytesDifference"/>
        </Or>
        <Bug pattern="DM_BOXED_PRIMITIVE_TOSTRING"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.counter.DefaultEventCounter"/>
                <Method name="onEvent"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.log.DefaultCounter"/>
                <Method name="plusOne"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.font.Type3Glyph"/>
                <Method name="fillBBFromBytes"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfNumber"/>
                <Method name="generateValue"/>
            </And>
            <And>
                <Or>
                    <Class name="com.itextpdf.kernel.pdf.PdfLiteral"/>
                    <Class name="com.itextpdf.kernel.pdf.PdfName"/>
                    <Class name="com.itextpdf.kernel.pdf.PdfNumber"/>
                    <Class name="com.itextpdf.kernel.pdf.PdfString"/>
                </Or>
                <Method name="toString"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.wmf.MetaDo"/>
                <Method name="readAll"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.wmf.MetaFont"/>
                <Method name="init"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.utils.CompareTool"/>
                <Method name="findBytesDifference"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.xmp.XMPUtils"/>
                <Or>
                    <Method name="decodeBase64"/>
                    <Method name="encodeBase64"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.xmp.impl.Base64"/>
                <Or>
                    <Method name="encode"/>
                    <Method name="decode"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.xmp.impl.XMPSerializerHelper"/>
                <Method name="serializeToString"/>
            </And>
        </Or>
        <Bug pattern="DM_DEFAULT_ENCODING"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.crypto.OutputStreamAesEncryption"/>
                <Method name="&lt;init&gt;" params="java.io.OutputStream, byte[], int, int" returns="void"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.crypto.securityhandler.EncryptionUtils"/>
                <Or>
                    <Method name="fetchEnvelopedData"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.crypto.securityhandler.PubKeySecurityHandler"/>
                <Or>
                    <Method name="computeGlobalKey"/>
                    <Method name="computeGlobalKeyOnReading"/>
                    <Method name="createRecipientsArray"/>
                </Or>>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.crypto.securityhandler.SecurityHandler"/>
                <Method name="safeInitMessageDigest"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.crypto.securityhandler.StandardHandlerUsingAes256"/>
                <Or>
                    <Method name="initKeyAndFillDictionary"/>
                    <Method name="initKeyAndReadDictionary"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfArray"/>
                <Or>
                    <Method name="toDoubleArray"/>
                    <Method name="toFloatArray"/>
                    <Method name="toIntArray"/>
                    <Method name="toLongArray"/>
                    <Method name="toRectangle"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfDocument"/>
                <Or>
                    <Method name="copyPagesTo"/>
                    <Method name="open"/>
                    <Method name="tryFlushTagStructure"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfEncryption"/>
                <Or>
                    <Method name="decryptByteArray"/>
                    <Method name="encryptByteArray"/>
                    <Method name="generateNewDocumentId"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfObject"/>
                <Method name="flush"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfOutputStream"/>
                <Method name="write"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfPage"/>
                <Or>
                    <Method name="getContentBytes"/>
                    <Method name="tryFlushPageTags"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfReader"/>
                <Or>
                    <Method name="readObject"/>
                    <Method name="readXref"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfStream"/>
                <Method name="getBytes"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.parser.PdfCanvasProcessor"/>
                <Method name="processContent"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.parser.clipper.DefaultClipper"/>
                <Method name="processIntersections"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.wmf.WmfImageHelper"/>
                <Or>
                    <Method name="createFormXObject"/>
                    <Method name="processParameters"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.wmf.MetaFont"/>
                <Method name="getFont"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.wmf.WmfImageData"/>
                <Method name="readImageType"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.parser.ParserGraphicsState"/>
                <Method name="transformPoints"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.filters.FlateDecodeFilter"/>
                <Method name="decodePredictor"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.filters.LZWDecoder"/>
                <Method name="writeString"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.xobject.PdfImageXObject"/>
                <Method name="getImageBytes"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.utils.CompareTool"/>
                <Method name="compareByContent"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.utils.TaggedPdfReaderTool"/>
                <Or>
                    <Method name="inspectKid"/>
                    <Method name="inspectAttributes"/>
                    <Method name="parseTag"/>
                </Or>
            </And>
        </Or>
        <Bug pattern="EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.Version"/>
        <Method name="getInstance"/>
        <Or>
            <Bug pattern="EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS"/>
            <Bug pattern="LSC_LITERAL_STRING_COMPARISON"/>
        </Or>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.geom.AffineTransform"/>
        <Method name="getType"/>
        <Bug pattern="FE_FLOATING_POINT_EQUALITY"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.pdf.colorspace.PdfCieBasedCs$CalGray"/>
        <Method name="&lt;init&gt;"/>
        <Bug pattern="FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.pdf.PdfVersion"/>
        <Bug pattern="HE_EQUALS_USE_HASHCODE"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.font.PdfType0Font"/>
                <Method name="&lt;init&gt;" params="com.itextpdf.io.font.TrueTypeFont, java.lang.String" returns="void"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.font.PdfType3Font"/>
                <Method name="&lt;init&gt;" params="com.itextpdf.kernel.pdf.PdfDictionary" returns="void"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfAConformanceLevel"/>
                <Method name="getConformanceLevel"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfDocument"/>
                <Method name="getAllOutlinesToCopy"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfPage"/>
                <Method name="removeAnnotation"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfString"/>
                <Method name="getValueBytes"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.annot.PdfSoundAnnotation"/>
                <Method name="correctWavFile"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.parser.util.InlineImageParsingUtils"/>
                <Method name="parseUnfilteredSamples"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser"/>
                <Method name="parse"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.layer.PdfLayer"/>
                <Method name="setUser"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.tagutils.RoleMappingResolverPdf2"/>
                <Method name="currentRoleIsStandard"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.xobject.PdfImageXObject"/>
                <Method name="createPdfStream"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.utils.CompareTool"/>
                <Method name="convertPdfStringToBytes"/>
            </And>
        </Or>
        <Bug pattern="LSC_LITERAL_STRING_COMPARISON"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.xmp.impl.ISO8601Converter"/>
                <Method name="render"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.xmp.impl.Utils"/>
                <Or>
                    <Method name="escapeXML"/>
                    <Method name="normalizeLangValue"/>
                    <Method name="splitNameAndValue"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.xmp.options.Options"/>
                <Method name="getOptionsString"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.xmp.impl.XMPUtilsImpl"/>
                <Or>
                    <Method name="applyQuotes"/>
                    <Method name="catenateArrayItems"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.xmp.impl.xpath.XMPPath"/>
                <Method name="toString"/>
            </And>
        </Or>
        <Bug pattern="LSYC_LOCAL_SYNCHRONIZED_COLLECTION"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.geom.PageSize"/>
                <Or>
                    <Field name="A4"/>
                    <Field name="Default"/>
                </Or>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfName"/>
                <Field name="staticNames"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfOutline"/>
                <Or>
                    <Field name="FLAG_BOLD"/>
                    <Field name="FLAG_ITALIC"/>
                </Or>
            </And>
        </Or>
        <Bug pattern="MS_SHOULD_BE_FINAL"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.pdf.colorspace.PdfColorSpace"/>
        <Field name="directColorSpaces"/>
        <Bug pattern="MS_MUTABLE_COLLECTION"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.pdf.extgstate.PdfExtGState"/>
        <Method name="isBlackPointCompensationUsed"/>
        <Bug pattern="NP_BOOLEAN_RETURN_NULL"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.xmp.impl.XMPSerializerRDF"/>
        <Method name="checkOptionsConsistence"/>
        <Bug pattern="NS_DANGEROUS_NON_SHORT_CIRCUIT"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.crypto.securityhandler.EncryptionUtils"/>
                <Method name="calculateDERForRecipientParams"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.crypto.securityhandler.PubKeySecurityHandler"/>
                <Method name="computeRecipientInfo"/>
            </And>
        </Or>
        <Bug pattern="OBJECT_DESERIALIZATION"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfDocument"/>
                <Method name="getAllOutlinesToCopy"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.PdfDocument"/>
                <Method name="getFileId"/>
            </And>
        </Or>
        <Bug pattern="PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.pdf.SmartModePdfObjectsSerializer"/>
                <Field name="serializedContentToObj"/>
            </And>
            <And>
                <Class name="com.itextpdf.kernel.pdf.tagutils.RootTagNormalizer"/>
                <Field name="context"/>
            </And>
        </Or>
        <Bug pattern="SE_BAD_FIELD"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.xmp.impl.Utils"/>
        <Method name="isNameStartChar"/>
        <Bug pattern="UC_USELESS_CONDITION_TYPE"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.kernel.crypto.securityhandler.StandardHandlerUsingAes256"/>
                <Method name="initKeyAndReadDictionary"/>
            </And>
            <And>
                <Or>
                    <Class name="com.itextpdf.kernel.pdf.PdfLiteral"/>
                    <Class name="com.itextpdf.kernel.pdf.PdfName"/>
                </Or>
                <Method name="toString"/>
            </And>
            <And>
                <Or>
                    <Class name="com.itextpdf.kernel.crypto.securityhandler.SecurityHandler"/>
                    <Class name="com.itextpdf.kernel.pdf.SmartModePdfObjectsSerializer"/>
                    <Class name="com.itextpdf.kernel.pdf.PdfEncryption"/>
                </Or>
            </And>
        </Or>
        <Bug pattern="WEAK_MESSAGE_DIGEST_MD5"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.pdf.PdfDocument"/>
        <Method name="open"/>
        <Bug pattern="PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.pdf.filters.FlateDecodeFilter"/>
        <Method name="flateDecode"/>
        <Bug pattern="EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.kernel.pdf.filters.FlateDecodeStrictFilter"/>
        <Method name="flateDecode"/>
        <Bug pattern="EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS"/>
    </Match>
</FindBugsFilter>
