<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
    <Match>
        <Or>
            <And>
                <Or>
                    <Class name="com.itextpdf.layout.renderer.BlockRenderer"/>
                    <Class name="com.itextpdf.layout.renderer.LineRenderer"/>
                    <Class name="com.itextpdf.layout.renderer.ParagraphRenderer"/>
                    <Class name="com.itextpdf.layout.renderer.TableRenderer"/>
                    <Class name="com.itextpdf.layout.renderer.TextRenderer"/>
                </Or>
                <Method name="layout"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.renderer.TableWidths"/>
                <Method name="autoLayout"/>
            </And>
        </Or>
        <Bug pattern="CC_CYCLOMATIC_COMPLEXITY"/>
    </Match>
    <Match>
        <Or>
            <Class name="com.itextpdf.layout.layout.LayoutArea"/>
            <Class name="com.itextpdf.layout.layout.RootLayoutArea"/>
            <Class name="com.itextpdf.layout.margincollapse.MarginsCollapse"/>
        </Or>
        <Method name="clone"/>
        <Bug pattern="CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.layout.font.FontProvider"/>
                <!-- 
                    FontProvider is usually used in highlevel API, which requests fonts in deep underlying logic.
                    IOException would mean that font is chosen and it is supposed to exist, however it cannot be read.
                    Using fallbacks in such situations would make FontProvider less intuitive.
                                    
                    Even though softening of checked exceptions can be handled at higher levels in order to let
                    the caller of this method know that font creation failed, we prefer to avoid bloating highlevel API
                    and avoid making higher level code depend on low-level code because of the exceptions handling.
                 -->
                <Method name="getPdfFont"  params="com.itextpdf.layout.font.FontInfo, com.itextpdf.layout.font.FontSet" returns="com.itextpdf.kernel.font.PdfFont"/>
            </And>
            <And>
                <!-- 
                    Here creating of specific XMLReader is requested for processing patterns in hyphenation. 
                    If it fails, hyphenation processing cannot be recovered.
                 -->
                <Class name="com.itextpdf.layout.hyphenation.PatternParser"/>
                <Method name="createParser"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.renderer.TypographyUtils"/>
                <Or>
                    <!--
                        If typography utils throws an exception at this point, we consider it as unrecoverable situation for
                        its callers (layouting methods). Presence of typography module in class path is checked before.
                        It's might be more suitable to wrap checked exceptions at a bit higher level, but we do it here for
                        the sake of convenience.
                     -->
                    <Method name="callConstructor"/>
                    <Method name="callMethod" params="java.lang.String, java.lang.String, java.lang.Object, java.lang.Class[], java.lang.Object[]" returns="java.lang.Object"/>
                </Or>
            </And>
        </Or>
        <Bug pattern="EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.layout.renderer.LineRenderer"/>
        <Method name="layout"/>
        <Bug pattern="FE_FLOATING_POINT_EQUALITY"/>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.layout.font.FontCharacteristics"/>
                <Method name="setFontStyle"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.font.FontSelector$PdfFontComparator"/>
                <Method name="compare"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.hyphenation.HyphenationTreeCache"/>
                <Method name="constructLlccKey"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.hyphenation.Hyphenator"/>
                <Method name="getHyphenationTree"  params="java.lang.String, java.lang.String, java.util.Map" returns="com.itextpdf.layout.hyphenation.HyphenationTree"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.hyphenation.PatternParser"/>
                <Method name="startElement"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.renderer.AccessibleAttributesApplier"/>
                <Method name="applyBlockLevelLayoutAttributes"/>
            </And>
        </Or>
        <Bug pattern="LSC_LITERAL_STRING_COMPARISON"/>
    </Match>
    <Match>
        <Class name="com.itextpdf.layout.hyphenation.Hyphen"/>
        <Method name="toString"/>
        <Or>
            <Bug pattern="LSC_LITERAL_STRING_COMPARISON"/>
            <Bug pattern="LSYC_LOCAL_SYNCHRONIZED_COLLECTION"/>
        </Or>
    </Match>
    <Match>
        <Or>
            <And>
                <Class name="com.itextpdf.layout.renderer.AccessibleAttributesApplier"/>
                <Method name="applyBlockLevelLayoutAttributes"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.hyphenation.Hyphenation"/>
                <Method name="toString"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.hyphenation.TernaryTreeIterator"/>
                <Method name="run"/>
            </And>
            <And>
                <Class name="com.itextpdf.layout.hyphenation.HyphenationTree"/>
                <Or>
                    <Method name="getValues"/>
                    <Method name="unpackValues"/>
                </Or>
            </And>
        </Or>
        <Bug pattern="LSYC_LOCAL_SYNCHRONIZED_COLLECTION"/>
    </Match>
</FindBugsFilter>
